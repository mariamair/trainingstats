name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.production -t ghcr.io/${{ github.repository_owner }}/trainingstats:latest .

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/trainingstats:latest

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npx eslint ./src

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npx eslint ./public

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false  # Important: avoids auth issues with later push
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npx --node-options=--experimental-vm-modules jest --json --outputFile=./test/reports/report.json

      - name: Generate Test report
        run: node test/createTestreport.js

      - name: Commit and push generated report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add test/reports/
          git commit -m "Add updated test report [skip ci]" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:${{ github.ref }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend, unit-test]
    if: github.ref == 'refs/heads/main'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
      PRODUCTION_HOST_USER: ${{ secrets.PRODUCTION_HOST_USER }}
      PRODUCTION_HOST_DEPLOY_PATH: ${{ secrets.PRODUCTION_HOST_DEPLOY_PATH }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openssh-client   
          eval "$(ssh-agent -s)"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      
      - name: Copy docker-compose files to server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 \
          docker-compose.production.yml \
          $PRODUCTION_HOST_USER@$PRODUCTION_HOST:$PRODUCTION_HOST_DEPLOY_PATH/

      - name: Pull and Deploy Docker Image via SSH
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_HOST_USER: ${{ secrets.PRODUCTION_HOST_USER }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET}}
        run: |
          ssh -tt -o StrictHostKeyChecking=no $PRODUCTION_HOST_USER@$PRODUCTION_HOST << EOF
            pwd && ls -la
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > $PRODUCTION_HOST_DEPLOY_PATH/.env
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            sudo docker pull ghcr.io/${{ github.repository_owner }}/trainingstats:latest
            cd $PRODUCTION_HOST_DEPLOY_PATH
            sudo docker compose -p trainingstats -f docker-compose.production.yml --env-file .env up -d
            exit
          EOF